source ~/.yacoob-conf

# Umask
umask 027

# Load zsh modules and builtins, configure them.
autoload run-help
autoload -U url-quote-magic
zle -N self-insert url-quote-magic
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' stagedstr '%F{yellow}●'
zstyle ':vcs_info:*' unstagedstr '%F{red}●'
zstyle ':vcs_info:*' formats '%u%c %F{green}%b %F{default}'
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' get-revision  true
autoload -U zmv

# Load user functions.
fpath=(~/.zsh/functions* $fpath)
autoload -U ~/.zsh/functions*/*(:t)

# Configure ZLE.
bindkey -v
# vi mode indicator in prompt.
zle -N zle-keymap-select
zle -N zle-line-finish
# Some vim and emacs keybindings.
bindkey -M viins '^r' history-incremental-search-backward
bindkey -M vicmd '^r' history-incremental-search-backward
bindkey -a 'gg' beginning-of-buffer-or-history
bindkey -a G end-of-buffer-or-history
bindkey '^G' what-cursor-position
bindkey -a u undo
bindkey -a '^R' redo
bindkey '^?' backward-delete-char
bindkey '^H' backward-delete-char
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line
# Terminal dependent binds.
typeset -A key
key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
[[ -n "${key[Home]}" ]]  && bindkey "${key[Home]}" beginning-of-line; bindkey -a "${key[Home]}" beginning-of-line
[[ -n "${key[End]}"  ]]  && bindkey "${key[End]}" end-of-line; bindkey -a "${key[End]}" end-of-line
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
[[ -n "${key[Up]}"   ]]  && bindkey  "${key[Up]}" up-line-or-beginning-search
[[ -n "${key[Down]}" ]]  && bindkey  "${key[Down]}" down-line-or-beginning-search
# fake-enter = save to history without executing.
zle -N fake-enter; bindkey "^X^H" fake-enter

# Setup ZSH variables.
typeset -U path
cdpath=(. ~)
DIRSTACKSIZE=20
fignore=(\~)
LISTMAX=0
LOGCHECK=60
HISTSIZE=20000
HISTFILE=~/.zsh_history
MAILCHECK=1
READNULLCMD=less
REPORTTIME=15
SAVEHIST=20000
TIMEFMT='%J  %*U user %*S system %P cpu (%*E wasted time).'
watch=(all)
WATCHFMT='%n %a %l from %m at %t.'
WORDCHARS="${WORDCHARS:s#/#}"

# Setup ZSH options.
setopt \
  auto_cd \
  auto_name_dirs \
  auto_pushd \
  auto_resume \
  nobeep \
  cdable_vars \
  csh_null_glob \
  correct \
  correct_all \
  extended_glob \
  NO_glob_dots \
  hist_allow_clobber \
  hist_find_no_dups \
  hist_ignore_all_dups \
  hist_ignore_dups \
  hist_ignore_space \
  hist_reduce_blanks \
  HIST_save_no_dups \
  inc_append_history \
  NO_list_ambiguous \
  NO_list_beep \
  long_list_jobs \
  magic_equal_subst \
  notify \
  prompt_subst \
  pushd_minus \
  pushd_silent \
  pushd_to_home \
  rc_quotes \
  share_history \
  transient_rprompt \

# Enable auto-execution of functions.
PERIOD=300
typeset -ga preexec_functions
typeset -ga precmd_functions
typeset -ga periodic_functions
precmd_functions+='vcs_info'
precmd_functions+='precmd_term_title'
preexec_functions+='preexec_term_title'
periodic_functions+='conf-prompt-helper'

# Set up prompts.
# Use an anonymous function to isolate local variables from user environment.
function {
  local -a plines tmp

  # First line.
  tmp+='%(!.%F{red}✖%F{default}.%F{green}❤%F{default})'
  tmp+=' [%(2L.+.)%n%F{red}@%F{default}%m%F{default}]'
  tmp+=' [%F{red}%T %w%F{default}]'
  tmp+=' [%F{yellow}%!%F{default}]'
  tmp+=' [%(?.-.%F{cyan}%?%F{default})]'
  plines+=${(j::)tmp}

  # Second line.
  plines+='[%F{cyan}%~%F{default}]'

  # Third line.
  tmp=()
  tmp+='%F{yellow}${_CMD_MODE:+☯ }%F{default}'
  tmp+='%F{cyan}${_CONF_UPDATE:+⟳  }%F{default}'
  tmp+='%(?,,%F{red})%(!.#.$)%F{default} '
  plines+=${(j::)tmp}

  # PROMPT, assemble!
  PROMPT=${(F)plines}
 }
RPROMPT=$'${vcs_info_msg_0_}'

# Define aliases.
alias cd/='cd /'
alias cd..='cd ..'
alias cd...='cd ../..'
alias cp='nocorrect cp -i'
alias d='dirs -v'
alias dlbf='rm -f (.*~|*~)'
alias dlb='rm  -i (.*~|*~)'
alias grep=egrep
alias h=history
alias j=jobs
alias la='ls -A'
alias lla='ll -A'
alias lld='ls -ld *(-/DN)'
alias ll='ls -lh'
alias mkdir='nocorrect mkdir'
alias mmv='noglob zmv -W'
alias mv='nocorrect mv -i'
alias po=popd
alias pu=pushd
alias pwg='pwgen -c -n -y -s -B 12 1'
alias rdlbf='find . -iname \*~ | xargs rm -f'
alias rezsh='nocorrect exec $SHELL'
alias rm='rm -i'
alias sudosh='nocorrect sudo $SHELL'
alias vew='source $(which virtualenvwrapper.sh)'
alias vi=vim
alias zmv='noglob zmv'

alias -g G="egrep"
alias -g H='|head'
alias -g L='|less'
alias -g T='|tail'

# Configure tab-completion.
zstyle ':completion::complete:cd::' tag-order '! users' -
zstyle ':completion::complete:-command-::' tag-order '! users' -
zstyle ':completion:*:corrections' format "- %d - (errors %e})"
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*:descriptions' format "- %d -"
zstyle ':completion:*:*:*:*:hosts' list-colors '=*=30;41'
zstyle ':completion:*:kill:*:processes' command "ps x"
zstyle ':completion:*:manuals.(^1*)' insert-sections true
zstyle ':completion:*:manuals' separate-sections true
#zstyle ':completion:*:*:*:*:users' list-colors '=*=$color[green]=$color[red]'
zstyle ':completion:*' cache-path ~/.zsh/cache
zstyle ':completion:*' group-name ''
#zstyle ':completion:*' list-colors 'reply=( "=(#b)(*$VAR)(?)*=00=$color[green]=$color[bg-green]" )'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' menu select
zstyle ':completion:*' use-cache on
zstyle ':completion:*' verbose yes
zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX + $#SUFFIX) / 3 )) )'

# Load functional zsh if it's there.
# https://github.com/Tarrasch/zsh-functional
[[ -d ~/.zsh/functional ]] && source ~/.zsh/functional/functional.plugin.zsh ]]

# Pull in OS dependent settings.
case "${OS}" in
    "linux")
        alias ls='ls --color=auto'
        ;;
    "osx")
        alias ls='ls -G'
        ;;
esac

# Pull in location dependent settings.
[[ -r ~/.zshrc.${LOCATION} ]] && source ~/.zshrc.${LOCATION}

# A dummy command that returns positive exit status to make prompt non-red :)
:
